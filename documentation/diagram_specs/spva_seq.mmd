sequenceDiagram
    title Secure PV Access Protocol Flow

    participant Agent as Secure EPICS Client
    participant Peer as Secure EPICS Server
    participant PVACMS as PVACMS

    Note over Peer: Initial State<br>TLS Context: Init<br>Peer Certificate Status: UNKNOWN
    Note over Agent: Initial State<br>TLS Context: Init<br>Peer Certificate Status: UNKNOWN

    % Check Server Phase
    Note over Peer: Check if EPICS Server is Viable
    alt Server Certificate Found AND is VALID<br>OR `stop-if-no-cert` flag is not set
        %% Server Cert Validation Phase
        Note over Peer: Check Server Certificate Viability
        alt Server Certificate Configured <br>AND VALID
            alt Server Certificate Revocation Monitoring Required
                Peer-->>PVACMS: Monitor Certificate Status
                Note over Peer: TLS Context: TcpReady
            else
                Note over Peer: TLS Context: TlsReady
            end
        else
            Note over Peer: TLS Context: DegradedMode
        end

        %% Trust Validation Phase
        Note over Agent: Check for Trust Anchor
        alt No Trust Anchor Found
            Agent-->>Peer: SEARCH (protocol=["tcp"]) with retry
        else
            Agent-->>Peer: SEARCH (protocol=["tcp", "tls"]) with retry
            %% Client Cert Validation Phase
            Note over Agent: Check Client Certificate Viability
            alt Client Certificate Configured <br>AND VALID
                alt Client Certificate Revocation Monitoring Required
                    Agent-->>PVACMS: Monitor Certificate Status
                    Note over Agent: TLS Context: TcpReady
                else
                    Note over Agent: TLS Context: TlsReady
                end
            else
                Note over Agent: TLS Context: DegradedMode
            end
        end

        par Client Certificate Monitoring Updates
            loop
                alt
                    PVACMS-->>Agent: Certificate Status(GOOD)
                    Note over Agent: TLS Context: TlsReady
                else
                    PVACMS-->>Agent: Certificate Status(NOT_GOOD)
                    Note over Agent: TLS Context: DegradedMode
                end
            end
        and Server Certificate Monitoring Updates
            loop
                alt
                    PVACMS-->>Peer: Certificate Status(GOOD)
                    Note over Peer: TLS Context: TlsReady
                else
                    PVACMS-->>Peer: Certificate Status(NOT_GOOD)
                    Note over Peer: TLS Context: DegradedMode
                end
            end
        and Search Response and Connection Establishment

            %% Server Response determination Phase
            alt Server TLS Context: DegradedMode
                Peer-->>Agent: SEARCH_RESPONSE (protocol="tcp", address)
                Agent->>Peer: TCP Connection initiated to `address`
            else Server TLS Context: TlsReady
                alt SEARCH protocol list contains "tls"
                    Peer-->>Agent: SEARCH_RESPONSE (protocol="tls", address)
                    Agent->>Peer: TLS Connection initiated to `address`
                else
                    Note over Peer: Check Server-only Authentication setting
                    alt Server-only Authenticated TLS allowed
                        Peer-->>Agent: SEARCH_RESPONSE (protocol="tcp", address)
                        Agent->>Peer: TLS Connection initiated to `address`
                    end
                end
            end

            % Connection Establishment Phase
            alt TCP Connection initiated
                Note over Agent, Peer: TCP Connection Established on `address`
            else 
                Note over Agent,Peer: TLS Connection Establishment begins on `address`
                alt Server Certificate Revocation Monitoring Required<br>AND Certificate Stapling Enabled<br>AND Server TLS Context: NOT TcpReady
                    Peer->>Agent: TLS_HANDSHAKE(server_certificate, server_certificate_status)
                else
                    Peer->>Agent: TLS_HANDSHAKE(server_certificate)
                end
                alt Client TLS Context: DegradedMode
                    Agent->>Peer: TLS_HANDSHAKE()
                else
                    Agent->>Peer: TLS_HANDSHAKE(client_certificate)
                    alt received `client_certificate` requires Revocation Monitoring
                        Peer-->>PVACMS: Monitor `client_certificate` Status
                    end
                end

                alt received `server_certificate` requires Revocation Monitoring
                    Agent-->>PVACMS: Monitor `server_certificate` Status
                end
            end

            %% Connection Validation Phase
            Peer->>Agent: CONNECTION_VALIDATION Request

            Note over Agent: Ready to VALIDATE CONNECTION?
            alt Client TLS Context: DegradedMode
                Agent-->>Peer: CONNECTION_VALIDATION Response
            else Client TLS Context: TlsReady
                alt `server_certificate` requires Revocation Monitoring
                    alt Peer Certificate Status: GOOD
                        Agent-->>Peer: CONNECTION_VALIDATION Response
                    end
                else
                    Agent-->>Peer: CONNECTION_VALIDATION Response
                end
            end

            Note over Agent: Ready to signal CONNECTION VALIDATED?
            alt Server TLS Context: DegradedMode<br>OR Server TLS Context: TlsReady
                Peer-->>Agent: CONNECTION_VALIDATED
            end

        and `server_certificate` Monitoring Updates
            loop
                alt
                    PVACMS-->>Agent: server_certificate(GOOD)
                    Note over Agent: Peer Certificate Status: GOOD
                else
                    PVACMS-->>Agent: server_certificate(NOT_GOOD)
                    Note over Agent: Peer Certificate Status: NOT_GOOD
                end
            end
        and `client_certificate` Monitoring Updates
            loop
                alt
                    PVACMS-->>Peer: client_certificate(GOOD)
                    Note over Peer: Peer Certificate Status: GOOD
                else
                    PVACMS-->>Peer: client_certificate(NOT_GOOD)
                    Note over Peer: Peer Certificate Status: NOT_GOOD
                end
            end
        end

        %% Channel Creation
        Agent->>Peer: CREATE_CHANNEL
        Peer-->>Agent: CREATE_CHANNEL Response

        %% Operations
        par GET Operation
            Agent->>Peer: GET Request
            Peer-->>Agent: GET Response(value)
        and MONITOR Operation
            Agent->>Peer: MONITOR Request
            Peer-->>Agent: MONITOR Response(subscription)
            loop Monitor Updates
                Peer-->>Agent: MONITOR Subscrition(update)
            end
        and RPC Operation
            Agent->>Peer: RPC Request
            Peer-->>Agent: RPC Response(value)
        and PUT Operation
            Agent->>Peer: PUT Request(value)
        end
    end

